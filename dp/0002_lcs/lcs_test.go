package lcs

import "testing"

func TestBasics(t *testing.T) {
	p := "BATD"
	q := "ABACD"
	result := lcs_dp(p, q)
	expected := 3
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}

	result = lcs_bottom_up(p, q)
	expected = 3
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestBothStringEmpty(t *testing.T) {
	p := ""
	q := ""
	result := lcs_dp(p, q)
	expected := 0
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}

	result = lcs_bottom_up(p, q)
	expected = 0
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestOneStringEmpty(t *testing.T) {
	p := "ABC"
	q := ""
	result := lcs_dp(p, q)
	expected := 0
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestNoCommonSubsequence(t *testing.T) {
	p := "ABC"
	q := "PQR"
	result := lcs_dp(p, q)
	expected := 0
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestAllIdentical(t *testing.T) {
	p := "AAA"
	q := "AAA"
	result := lcs_dp(p, q)
	expected := 3
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestCaseSensetive(t *testing.T) {
	p := "aBcDe"
	q := "AbCdE"
	result := lcs_dp(p, q)
	expected := 0
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestDifferentOrder(t *testing.T) {
	p := "ABCD"
	q := "DCBA"
	result := lcs_dp(p, q)
	expected := 1
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}

func TestLongString(t *testing.T) {
	p := "YZREQOAAZRIEWFBKJLNLDXGBRHNOVJOMCPTFPMNSOUODOIGBQIPHTKVEQCMJCHNCKGCIGFGXNZVIAHGDTTUKNOFRTJCXVNPTSNIBUQXEDTKWZXNYFBDGBOWKTGVEFAFFQYYFYFHIWNANHLKHPSCYENGAGOXKVTHAZKHYGNMMEPLZFCAANKWOLWBSBHERDFAIJRDMYMOWQHTCGVRHXEOKGJNUTGWCNJITLIBBAQEGNCXBDHEPPYKQXZRTJCRDHLAAOIOCFCSUCNFQEUBJNPUGQCUNXQVABWBDISAGCXGHCMSPWBSBMUOEOSTBKFOWZZNAGCJPXKFGOLCWFQDJMVJYTMXYDAPTMODGARESKDHGTZMWJJUHCYLAHAWBBGAZTUCTLRULAULQYQTZNXYXYCCDBVKIXFGSJUODVHINFAOGZMKQMANQSUHSEPDVRBTOQHOJXYHDHWSNZAXKACWZDXSVRXSKQLPSHHALVZHBSVVCHFAFLRHTMAFEIVKKQYRSLEWEXVTGNXYWPVWSYRZWNRRBGOZZLETSQWBMHJFSPKZZOCDOQCGHNDNZFOZGCZPELQWGGRLNWPBMICYPKCHIROOSKNTXJGZUIZQHRMJSPZLEALECTFYBY"
	q := "BNMWZPIBYSAVAPKGTRBJCIVPZJRDRCMEUBFZBZJMLKRCRSOVQQKZLEHBHJKQVFRQSCTAMAIOGGQSQNSSSZJUQKECJKIKUNFPAQMPDWWORNBNWVBBQNRAGIVNEIJNFMGVNIHLOFCLDXPHPLBQLCSWWAAMFMQVISUHRGFIPPKRHPGDFZKUUUMNSKJOQYREBJMWWWYKQLBTRKHJIHGFZJGUGYPAHWBMVZTKRJOEZQTRTUBCSQKOXVCYKZVELCHMIVQZQUESMQSFCTDZEHEDHKTIBKSMJXQIRVOCXWTINBXXPMPQARKBDOIJELZLDQTKJCOIFNIZDPYARPWZRLXHCNTHQESWBPXHUOJDSVXGKQLINPUQUDFXOUJKJQADLYSOSDVVVVUYYLWXJZYHVYDNBAUTDYNGCCRHLFDDSATFPETFPFCEMDFXVMLYVXBQBZGHLARHSZQFPYDNIHEICRTUIVMVCHMAXBOOXBRMTVVTLUAFDEHQKJCMLCNWOJGSTRBUIIJBNCXMSYLUAVMIGGXKIAUMTKUEBUJVIVYSXVKNUAURPSXFIIZDIRWQACKPXGCYZDJAIJMPFSCNFSJZXFGPSZRLKSFMLKEUWMFIUDPAQEZQVJOVSQDQTUOSPFBTOCMAWAWPTVUHPTQZSKVPCXLESVHUQFZDESUAYEOVQDYLRJPGXKVEMIYVPGJYZPLHAPDARYRFSKCQITANNPAVFVZPIDCPZYUYENZEIFPDCSMHZUERRFTTSOGCYUMHRHDSTYKZZKWEWXXJQKMGUKCSWQYYCFELGPHQXYLEIDETLZKTWZVYYHCRHSZSAACVKFWSBPNSQWOSWCIOBACDZMBFDGXRXHAHJZSRZIUDCCTOMGVMUEHZRIVAAOSWWXHBEGWREBCAMUHJUDSFKRFRZQGIJKGHKJEMSPFCUAQSMJLUGIPWCCOMEPSFNQFDKTDTLZDMVP"
	result := lcs_dp(p, q)
	expected := 249
	if result != expected {
		t.Errorf("got %q, wanted %q", result, expected)
	}
}
